/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Login;
import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-03-12T16:03:36.994Z[GMT]")
@Api(value = "admins", description = "the admins API")
public interface AdminsApi {

    @ApiOperation(value = "", nickname = "adminsAdminIdDelete", notes = "Deletes the admin account", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "OK Admin deleted"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Error: Not Found") })
    @RequestMapping(value = "/admins/{adminId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> adminsAdminIdDelete(@ApiParam(value = "The admin ID",required=true) @PathVariable("adminId") Integer adminId);


    @ApiOperation(value = "", nickname = "adminsAdminIdGet", notes = "Gets a admin by their id.", response = User.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK Admin obtained.", response = User.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Error: Not Found") })
    @RequestMapping(value = "/admins/{adminId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> adminsAdminIdGet(@ApiParam(value = "The admin ID",required=true) @PathVariable("adminId") Integer adminId);


    @ApiOperation(value = "", nickname = "adminsAdminIdPut", notes = "Modifies an admin", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK Admin Modified"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Error: Not Found") })
    @RequestMapping(value = "/admins/{adminId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> adminsAdminIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body,@ApiParam(value = "The admin ID",required=true) @PathVariable("adminId") Integer adminId);


    @ApiOperation(value = "", nickname = "adminsGet", notes = "Obtains all the admins", response = User.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK Admins obtained", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Error: Not Found") })
    @RequestMapping(value = "/admins",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> adminsGet();


    @ApiOperation(value = "", nickname = "createAdmin", notes = "Creates a new admin.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "OK Admin created") })
    @RequestMapping(value = "/admins",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createAdmin(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body);


    @ApiOperation(value = "", nickname = "loginAmin", notes = "Logs the admin into account", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Login Successful") })
    @RequestMapping(value = "/admins/Login",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> loginAmin(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Login body);

}
